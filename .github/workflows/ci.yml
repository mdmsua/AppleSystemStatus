name: ci

on:
  push:
    branches-ignore:
      - main

jobs:
  main:
    runs-on: ubuntu-latest
    environment: sandbox
    outputs:
      url: ${{ steps.id.outputs.id }}
      acr: ${{ steps.az.outputs.acr }}
      repo: ${{ steps.az.outputs.repo }}
      sql: ${{ steps.az.outputs.sql }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Generate unique identifier
        uses: azure/cli@v1
        id: id
        with:
          inlineScript: |
            id=$(az deployment sub create -l westeurope -f .azure/id.json --no-prompt -p name=${GITHUB_REF:11} | jq -r '.properties.outputs.id.value')
            echo "::set-output name=id::$id"
      - name: Fetch KeyVault SQL secrets
        uses: azure/get-keyvault-secrets@v1
        continue-on-error: true
        timeout-minutes: 1
        id: sql
        with:
          keyvault: ${{ steps.id.outputs.id }}
          secrets: "ServerUsername,ServerPassword,DatabaseUsername,DatabasePassword"
      - name: Generate SQL credentials
        id: db
        env:
          srvUser: sa${{ steps.id.outputs.id }}
          srvPass: $(openssl rand -base64 8)
          appUser: ${{ steps.id.outputs.id }}
          appPass: $(openssl rand -base64 8)
        run: |
          echo "::set-output name=srvUser::${{ steps.sql.outputs.ServerUsername || env.srvUser }}"
          echo "::set-output name=srvPass::${{ steps.sql.outputs.ServerPassword || env.srvPass }}"
          echo "::set-output name=appUser::${{ steps.sql.outputs.DatabaseUsername || env.appUser }}"
          echo "::set-output name=appPass::${{ steps.sql.outputs.DatabasePassword || env.appPass }}"
      - name: Download Bicep CLI & build template
        run: |
          curl -Lo bicep https://github.com/Azure/bicep/releases/latest/download/bicep-linux-x64
          chmod +x ./bicep
          ./bicep build sandbox.bicep
          rm ./bicep
        working-directory: .azure
      - name: Validate deployment
        uses: azure/cli@v1
        env:
          name: $(TZ=Europe/Berlin date "+gh_%Y-%m-%d_%H-%M-%S")
        with:
          inlineScript: |
            cd .azure
            az deployment sub validate -l westeurope -f sandbox.json -n ${{ env.name }} --no-prompt -p \
              name=${{ steps.id.outputs.id }} \
              branch=${GITHUB_REF:11} \
              oid=${{ secrets.CLIENT_ID }} \
              sid=${{ secrets.AD_SID }} \
              sqlServerAdLogin=${{ secrets.AD_LOGIN }} \
              sqlServerSaLogin=${{ steps.db.outputs.srvUser }} \
              sqlServerSaPassword=${{ steps.db.outputs.srvPass }} \
              sqlServerLogin=${{ steps.db.outputs.appUser }} \
              sqlServerPassword=${{ steps.db.outputs.appPass }} 
      - name: Create deployment
        uses: azure/cli@v1
        id: az
        env:
          name: $(TZ=Europe/Berlin date "+gh_%Y-%m-%d_%H-%M-%S")
        with:
          inlineScript: |
            cd .azure
            outputs=$(az deployment sub create -l westeurope -f sandbox.json -n ${{ env.name }} --no-prompt -p \
              name=${{ steps.id.outputs.id }} \
              branch=${GITHUB_REF:11} \
              oid=${{ secrets.CLIENT_ID }} \
              sid=${{ secrets.AD_SID }} \
              sqlServerAdLogin=${{ secrets.AD_LOGIN }} \
              sqlServerSaLogin=${{ steps.db.outputs.srvUser }} \
              sqlServerSaPassword=${{ steps.db.outputs.srvPass }} \
              sqlServerLogin=${{ steps.db.outputs.appUser }} \
              sqlServerPassword=${{ steps.db.outputs.appPass }} \
              | jq '.properties.outputs')
            echo "::set-output name=acr::$(echo $outputs | jq -r '.acrHost.value')"
            echo "::set-output name=repo::$(echo $outputs | jq -r '.acrRepo.value')"
            echo "::set-output name=sql::$(echo $outputs | jq -r '.sqlHost.value')"
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.x
      - name: Build & test application
        run: |
          dotnet tool restore
          dotnet restore
          dotnet build --no-restore --configuration Release
          dotnet test --no-build --configuration Release
      - name: Update database
        env:
          DatabaseConnectionString: "Server=tcp:${{ steps.az.outputs.sql }},1433;Initial Catalog=AppleSystemStatus;Persist Security Info=False;User ID=${{ steps.db.outputs.srvUser }};Password=${{ steps.db.outputs.srvPass }};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;"
          ApplicationUsername: ${{ steps.db.outputs.appUser }}
          ApplicationPassword: ${{ steps.db.outputs.appPass }}
        run: |
          dotnet ef database update --no-build --configuration Release --project src/AppleSystemStatus
      - name: Fetch KeyVault ACR secrets
        uses: azure/get-keyvault-secrets@v1
        id: acr
        with:
          keyvault: ${{ steps.id.outputs.id }}
          secrets: "RegistryUsername,RegistryPassword"
      - name: Login to container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ steps.az.outputs.acr }}
          username: ${{ steps.acr.outputs.RegistryUsername }}
          password: ${{ steps.acr.outputs.RegistryPassword }}
      - name: Build & push container image
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: |
            ${{ steps.az.outputs.repo }}:latest