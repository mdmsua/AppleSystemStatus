name: cd

on:
  push:
    branches:
      - main

env:
  SITE_NAME: aaplss

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Fetch KeyVault secrets
        uses: azure/get-keyvault-secrets@v1
        id: kv
        with:
          keyvault: ${{ secrets.GLOBAL_NAME }}
          secrets: "ServerUsername,ServerPassword,RegistryUsername,RegistryPassword,${{ env.SITE_NAME }}-DatabaseUsername,${{ env.SITE_NAME }}-DatabasePassword"
      - name: Download Bicep CLI & build template
        run: |
          curl -Lo bicep https://github.com/Azure/bicep/releases/latest/download/bicep-linux-x64
          chmod +x ./bicep
          ./bicep build main.bicep
          rm ./bicep
        working-directory: .azure
      - name: Validate deployment
        uses: azure/cli@v1
        with:
          inlineScript: |
            cd .azure
            az deployment group validate -g ${{ secrets.GLOBAL_NAME }} -f main.json --no-prompt -p \
              oid=${{ secrets.CLIENT_ID }} \
              sid=${{ secrets.AD_SID }} \
              sqlServerAdLogin=${{ secrets.AD_LOGIN }} \
              sqlServerSaLogin=${{ steps.kv.outputs.ServerUsername }} \
              sqlServerSaPassword=${{ steps.kv.outputs.ServerPassword }} \
              sqlServerLogin=${{ steps.kv.outputs[format('{0}-{1}', env.SITE_NAME, 'DatabaseUsername')] }} \
              sqlServerPassword=${{ steps.kv.outputs[format('{0}-{1}', env.SITE_NAME, 'DatabasePassword')] }} \
              siteName=${{ env.SITE_NAME }} \
              keyVaultProtection=true \
              secondaryLocation=westeurope
      - name: Create deployment
        uses: azure/cli@v1
        id: az
        env:
          name: $(TZ=Europe/Berlin date "+gh_%Y-%m-%d_%H-%M-%S")
        with:
          inlineScript: |
            cd .azure
            outputs=$(az deployment group create -g ${{ secrets.GLOBAL_NAME }} -f main.json -n ${{ env.name }} --no-prompt -p \
              oid=${{ secrets.CLIENT_ID }} \
              sid=${{ secrets.AD_SID }} \
              sqlServerAdLogin=${{ secrets.AD_LOGIN }} \
              sqlServerSaLogin=${{ steps.kv.outputs.ServerUsername }} \
              sqlServerSaPassword=${{ steps.kv.outputs.ServerPassword }} \
              sqlServerLogin=${{ steps.kv.outputs[format('{0}-{1}', env.SITE_NAME, 'DatabaseUsername')] }} \
              sqlServerPassword=${{ steps.kv.outputs[format('{0}-{1}', env.SITE_NAME, 'DatabasePassword')] }} \
              siteName=${{ env.SITE_NAME }} \
              secondaryLocation=westeurope \
              keyVaultProtection=true \
              | jq '.properties.outputs')
            echo "::set-output name=acr::$(echo $outputs | jq -r '.acrHost.value')"
            echo "::set-output name=repo::$(echo $outputs | jq -r '.acrRepo.value')"
            echo "::set-output name=sql::$(echo $outputs | jq -r '.sqlHost.value')"
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.x
      - name: Build & test application
        run: |
          dotnet tool restore
          dotnet restore
          dotnet build --no-restore --configuration Release
          dotnet test --no-build --configuration Release
      - name: Update database
        env:
          DatabaseConnectionString: "Server=tcp:${{ steps.az.outputs.sql }},1433;Initial Catalog=AppleSystemStatus;Persist Security Info=False;User ID=${{ steps.kv.outputs.ServerUsername }};Password=${{ steps.kv.outputs.ServerPassword }};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;"
          ApplicationUsername: ${{ steps.kv.outputs[format('{0}-{1}', env.SITE_NAME, 'DatabaseUsername')] }}
          ApplicationPassword: ${{ steps.kv.outputs[format('{0}-{1}', env.SITE_NAME, 'DatabasePassword')] }}
        run: |
          dotnet ef database update --no-build --configuration Release --project src/AppleSystemStatus
      - name: Setup GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.9
        with:
          versionSpec: '5.x'
      - name: Execute GitVersion
        uses: gittools/actions/gitversion/execute@v0.9.9
        id: gitversion
        with:
          useConfigFile: true
      - name: Setup Docker
        uses: docker/setup-buildx-action@v1
      - name: Login to container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ steps.az.outputs.acr }}
          username: ${{ steps.kv.outputs.RegistryUsername }}
          password: ${{ steps.kv.outputs.RegistryPassword }}
      - name: Build & push container image
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: |
            ${{ steps.az.outputs.repo }}:latest
            ${{ steps.az.outputs.repo }}:${{ steps.gitversion.outputs.majorMinorPatch }}
          build-args: |
            VERSION=${{ steps.gitversion.outputs.assemblySemVer }}